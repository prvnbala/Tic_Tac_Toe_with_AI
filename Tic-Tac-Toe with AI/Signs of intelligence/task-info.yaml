type: edu
custom_name: stage4
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter the cells: ");
            String state = scanner.nextLine();

            Game game = new Game(state);
            game.printGameMatrix();

            char symbol = game.findNextMoveSymbol();
            game.makeMove(symbol);
            game.printGameMatrix();
            System.out.println(game.getStatus());

            /*boolean xMoves = true;
            boolean oMoves = false;
            while (game.getStatus().equals("Game not finished")) {
                if (xMoves) {
                    game.makeMove('X');
                }

                if (oMoves) {
                    game.makeMove('O');
                }

                xMoves = !xMoves;
                oMoves = !oMoves;
                game.printGameMatrix();
            }

            System.out.println(game.getStatus());*/



        }

    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/controllers/GameController.java
  visible: true
  text: |
    package tictactoe.controllers;

    import tictactoe.models.Game;
    import tictactoe.models.GameStatus;
    import tictactoe.models.players.Player;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedList;
    import java.util.Queue;

    public class GameController {
        Game game;
        Queue<Player> playerQueue = new LinkedList<>();

        public GameController(Game game) {
            this.game = game;

            for (Player x : game.getPlayerList()) {
                playerQueue.offer(x);
            }
        }

        public void startGame() {
            while (game.getGameStatus() == GameStatus.IN_PROGRESS) {
                Player currentPlayer = playerQueue.poll();
                game.getBoard().printBoard();
                int[] lastMove = currentPlayer.makeMove(game.getBoard());
                playerQueue.offer(currentPlayer);

                game.updateGameStatus(lastMove);

                if (game.getGameStatus() == GameStatus.WIN) {
                    game.getBoard().printBoard();
                    System.out.println(currentPlayer.getSymbol() + " wins");
                    break;
                }

                if (game.getGameStatus() == GameStatus.DRAW) {
                    game.getBoard().printBoard();
                    System.out.println("Draw");
                }
            }
        }

    }
  learner_created: true
- name: src/tictactoe/models/GameStatus.java
  visible: true
  text: |
    package tictactoe.models;

    public enum GameStatus {
        WIN,
        DRAW,
        IN_PROGRESS
    }
  learner_created: true
- name: src/tictactoe/models/players/HumanPlayer.java
  visible: true
  text: |
    package tictactoe.models.players;

    import tictactoe.exceptions.CellOccupiedException;
    import tictactoe.models.Board;

    import java.util.Scanner;

    public class HumanPlayer implements Player {
        private String name;
        private Character symbol;

        public HumanPlayer(Character symbol) {
            this.symbol = symbol;
        }

        @Override
        public int[] makeMove(Board board) {
            Scanner scanner = new Scanner(System.in);
            int n = board.getSize();
            int[] lastMove = new int[2];
            boolean receviedInput = false;
            while (!receviedInput) {
                System.out.print("Enter the coordinates: ");
                try {
                    String input = scanner.nextLine();
                    String[] inps = input.split(" ");
                    int row = Integer.parseInt(inps[0]);
                    int col = Integer.parseInt(inps[1]);

                    if (board.getGrid().get(row - 1).get(col - 1) != '_') {
                        throw new CellOccupiedException();
                    }

                    board.getGrid().get(row - 1).set(col - 1, this.symbol);
                    lastMove[0] = row;
                    lastMove[1] = col;
                    receviedInput = true;

                } catch (IndexOutOfBoundsException e) {
                    System.out.println("Invalid range. Try again");
                } catch (CellOccupiedException e) {
                    System.out.println("Cell already occupied. Try again");
                } catch (NumberFormatException e) {
                    //
                }
            }
            return lastMove;
        }

        public Character getSymbol() {
            return symbol;
        }
    }
  learner_created: true
- name: src/tictactoe/exceptions/CellOccupiedException.java
  visible: true
  text: |
    package tictactoe.exceptions;

    public class CellOccupiedException extends Throwable {
    }
  learner_created: true
- name: src/tictactoe/models/Board.java
  visible: true
  text: |
    package tictactoe.models;

    import java.util.ArrayList;
    import java.util.List;

    public class Board {
        int size;
        List<List<Character>> grid = new ArrayList<>();

        public Board(int size) {
            this.size = size;
            buildEmptyGrid(size);
        }

        private void buildEmptyGrid(int size) {
            for (int i = 0; i < size; i++) {
                grid.add(new ArrayList<>());
                for (int j = 0; j < size; j++) {
                    grid.get(i).add('_');
                }
            }
        }

        public int getSize() {
            return size;
        }

        public void setSize(int size) {
            this.size = size;
        }

        public List<List<Character>> getGrid() {
            return grid;
        }

        public void printBoard() {
            System.out.println("---------");
            for (int i = 0; i < size; i++) {
                System.out.print("| ");
                for (int j = 0; j < size; j++) {
                    System.out.print(grid.get(i).get(j) + " ");
                }
                System.out.print("|");
                System.out.println();
            }
            System.out.println("---------");
        }

    }
  learner_created: true
- name: src/tictactoe/strategies/playing_strategy/PlayingStrategy.java
  visible: true
  text: |
    package tictactoe.strategies.playing_strategy;

    import tictactoe.models.Board;

    public interface PlayingStrategy {
        public int[] findNextMove(Board board);
    }
  learner_created: true
- name: src/tictactoe/models/Game.java
  visible: true
  text: |
    package tictactoe.models;

    import tictactoe.models.players.Player;
    import tictactoe.strategies.winning_strategy.DefaultWinningStrategy;
    import tictactoe.strategies.winning_strategy.WinningStrategy;

    import java.util.ArrayList;
    import java.util.List;

    public class Game {
        Board board;
        List<Player> playerList = new ArrayList<>();
        WinningStrategy winningStrategy;
        GameStatus gameStatus;

        public Game() {
            this.winningStrategy = new DefaultWinningStrategy();
            this.gameStatus = GameStatus.IN_PROGRESS;
        }

        public void addPlayer(Player player) {
            playerList.add(player);
        }

        public void setBoard(Board board) {
            this.board = board;
        }

        public void setWinningStrategy(WinningStrategy winningStrategy) {
            this.winningStrategy = winningStrategy;
        }

        public void setGameStatus(GameStatus gameStatus) {
            this.gameStatus = gameStatus;
        }

        public List<Player> getPlayerList() {
            return playerList;
        }

        public Board getBoard() {
            return board;
        }

        public GameStatus getGameStatus() {
            return gameStatus;
        }

        public void updateGameStatus(int[] lastMove) {
            gameStatus = winningStrategy.checkWin(board, lastMove);
        }
    }
  learner_created: true
- name: src/tictactoe/exceptions/BadParametersException.java
  visible: true
  text: |
    package tictactoe.exceptions;

    public class BadParametersException extends Throwable {
    }
  learner_created: true
- name: src/tictactoe/strategies/winning_strategy/DefaultWinningStrategy.java
  visible: true
  text: |
    package tictactoe.strategies.winning_strategy;

    import tictactoe.models.Board;
    import tictactoe.models.GameStatus;

    public class DefaultWinningStrategy implements WinningStrategy {
        @Override
        public GameStatus checkWin(Board board, int[] lastMove) {

            char currentChar = board.getGrid().get(lastMove[0] - 1).get(lastMove[1] - 1);
            boolean rowWin = true;
            for (int i = 0; i < board.getSize(); i++) {
                if (board.getGrid().get(lastMove[0] - 1).get(i) != currentChar) {
                    rowWin = false;
                }
            }

            boolean colWin = true;
            for (int i = 0; i < board.getSize(); i++) {
                if (board.getGrid().get(i).get(lastMove[1] - 1) != currentChar) {
                    colWin = false;
                }
            }

            boolean diag1Win = true;
            for (int i = 0; i < board.getSize(); i++) {
                if (board.getGrid().get(i).get(i) != currentChar) {
                    diag1Win = false;
                }
            }

            boolean diag2Win = true;
            for (int i = board.getSize() - 1; i >= 0 ; i--) {
                if (board.getGrid().get(i).get(i) != currentChar) {
                    diag2Win = false;
                }
            }

            if (rowWin || colWin || diag1Win || diag2Win) {
                return GameStatus.WIN;
            } else {
                int emptyCount = 0;
                for (int i = 0; i < board.getSize(); i++) {
                    for (int j = 0; j < board.getSize(); j++) {
                        if (board.getGrid().get(i).get(j) == '_') {
                            emptyCount++;
                        }
                    }
                }

                if (emptyCount == 0) {
                    return GameStatus.DRAW;
                }
            }

            return GameStatus.IN_PROGRESS;
        }
    }
  learner_created: true
- name: src/tictactoe/strategies/winning_strategy/WinningStrategy.java
  visible: true
  text: |
    package tictactoe.strategies.winning_strategy;

    import tictactoe.models.Board;
    import tictactoe.models.Game;
    import tictactoe.models.GameStatus;

    public interface WinningStrategy {
        public GameStatus checkWin(Board board, int[] lastMove);
    }
  learner_created: true
- name: src/tictactoe/models/players/Player.java
  visible: true
  text: |
    package tictactoe.models.players;

    import tictactoe.models.Board;

    public interface Player {
        public int[] makeMove(Board board);
        public Character getSymbol();
    }
  learner_created: true
- name: src/tictactoe/models/players/BotPlayer.java
  visible: true
  text: |
    package tictactoe.models.players;

    import tictactoe.models.Board;
    import tictactoe.strategies.playing_strategy.PlayingStrategy;

    public class BotPlayer implements Player{
        private Character symbol;
        private PlayingStrategy playingStrategy;

        public BotPlayer(Character symbol, PlayingStrategy playingStrategy) {
            this.symbol = symbol;
            this.playingStrategy = playingStrategy;
        }

        @Override
        public int[] makeMove(Board board) {
            int[] movePoint = playingStrategy.findNextMove(board);

            board.getGrid().get(movePoint[0] - 1).set(movePoint[1] - 1, symbol);
            return movePoint;
        }

        public Character getSymbol() {
            return symbol;
        }
    }
  learner_created: true
- name: src/tictactoe/strategies/playing_strategy/EasyDifficultyStrategy.java
  visible: true
  text: |
    package tictactoe.strategies.playing_strategy;

    import tictactoe.models.Board;

    import java.util.Random;

    public class EasyRandomMoveStrategy implements PlayingStrategy {
        @Override
        public int[] findNextMove(Board board) {
            int n = board.getSize();
            boolean foundMove = false;
            int[] movePoint = new int[2];
            Random random = new Random();
            while (!foundMove) {
                int row = random.nextInt(3);
                int col = random.nextInt(3);

                if (board.getGrid().get(row).get(col) == '_') {
                    movePoint[0] = row + 1;
                    movePoint[1] = col + 1;
                    foundMove = true;
                    System.out.println("Making move level \"easy\"");
                }
            }

            return movePoint;
        }
    }
  learner_created: true
- name: src/tictactoe/strategies/playing_strategy/MediumDifficultyStrategy.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/450/implement#comment
status: Unchecked
record: -1
